Index: src/test/java/com/tuttur/page/MainPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tuttur.page;\n\n\nimport com.tuttur.configs.PropertiesFile;\nimport com.tuttur.constants.RegisterPage_Constants;\nimport com.tuttur.util.BasePageUtil;\nimport com.tuttur.util.ExcelUtil;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport org.junit.Assert;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.JavascriptExecutor;\nimport org.openqa.selenium.WebDriver;\nimport com.tuttur.constants.MainPage_Constants;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.interactions.Actions;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\npublic class MainPage extends MainPage_Constants {\n\n    public MainPage(WebDriver driver) throws IOException {\n        super(driver);\n    }\n\n    PropertiesFile prop = new PropertiesFile(driver);\n    DbQueriesPage db = new DbQueriesPage(driver);\n    BasePageUtil base = new BasePageUtil(driver);\n    ExcelUtil util = new ExcelUtil(driver);\n    Actions action = new Actions(driver);\n    JavascriptExecutor js = (JavascriptExecutor) driver;\n\n\n    boolean contains = false;\n\n    public void dropdownMenu(String menu) {\n\n        List<WebElement> dropdown = driver.findElements(DROPDOWN_MENU);\n\n        for (WebElement element : dropdown) {\n\n            String menuItem = element.findElement(By.tagName(\"a\")).getText();\n\n            if (menuItem.contains(menu)) {\n\n                element.click();\n            }\n        }\n    }\n\n    public LoginPage getLoginPage() {\n\n        clickObjectBy(BUTTON_LOGIN);\n\n        return new LoginPage(driver);\n    }\n\n    public MainPage logout() throws InterruptedException {\n\n        scrollToElement(AVATAR);\n        clickObjectBy(AVATAR);\n        dropdownMenu(\"Çıkış\");\n\n        return this;\n    }\n\n    public MainPage accountUpdate() throws IOException {\n\n        db.executeQuery(prop.getObject(\"accountUpdate\"));\n\n        return this;\n    }\n\n    public RegisterPage getRegisterPage() throws IOException {\n\n        clickObjectBy(REGISTER_BUTTON);\n\n        return new RegisterPage(driver);\n    }\n\n    public RegisterPage getRegisterPageNotUpdate() throws IOException {\n\n        clickObjectBy(REGISTER_BUTTON);\n        return new RegisterPage(driver);\n\n    }\n\n\n    public MainPage checkAccountNo(int rowNumber) throws IOException {\n\n        assertTrue(prop.getObject(\"accountNumberCheck\"), getElementBy(ACCOUNT_NO).getText()\n                .equals(getData(rowNumber, 3)));\n\n        return this;\n    }\n\n    public MainPage checkUsernameText(int rowNumber, int cellNumber) throws IOException {\n\n\n            waitForElement(driver, MIN_WAIT_4_ELEMENT, USERNAMETEXT);\n\n            assertTrue(prop.getObject(\"usernameCheck\"), getElementBy(USERNAMETEXT).getText()\n                    .equals(getData(rowNumber, cellNumber)));\n\n\n        return this;\n    }\n\n    public MainPage checkUserText(String username) {\n\n        String headerUser = username;\n        waitForElement(driver, OPT_WAIT_4_ELEMENT, USERNAMETEXT);\n\n        assertTrue(\"x\", getElementBy(USERNAMETEXT).getText()\n                .equals(headerUser));\n\n        return this;\n    }\n\n    public void isDisplayedUsername() {\n\n        Assert.assertFalse(getElementBy(USERNAMETEXT).getText().isEmpty());\n    }\n\n    public MainPage checkRegisterLogin() throws InterruptedException, IOException {\n\n        assertTrue(prop.getObject(\"unsuccessfullyLoginAfterRegister\"), getElementBy(ACCOUNT_NO).getText()\n                .equals(getData(5, 10)));\n        return this;\n    }\n\n    public NavigationPage checkSubmenuUrl() {\n\n\n        List<WebElement> headerMenus = findElements(HEADER_IDDAA_BUTTON);\n\n\n        int subCount = 0;\n        int headerCount = 0;\n\n        for (int headerIndex = headerCount; headerIndex < headerMenus.size(); headerIndex++) {\n\n            action.moveToElement(headerMenus.get(headerIndex)).build().perform();\n\n            List<WebElement> subMenus = findElements(IDDAA_SUBMENU);\n\n            for (int i = subCount; i < subMenus.size(); i++) {\n\n                subMenus.get(i).click();\n                WebElement element = subMenus.get(i);\n                String Url = element.findElement(By.tagName(\"a\")).getAttribute(\"href\");\n                System.out.println(Url);\n            }\n        }\n\n        return new NavigationPage(driver);\n    }\n\n    public MainPage checkRedirectSocialMediaUrl() throws InterruptedException, IOException {\n\n\n\n        waitForPageLoad();\n        js.executeScript(\"window.scrollBy(0,2000)\");\n\n        clickObjectBy(new RegisterPage_Constants(driver).BUTTON_CLOSE_COOKİE_BAR);\n\n\n\n        for (int i = 0; i < socialMediaElements().size(); i++) {\n\n\n            socialMediaElements().get(i).click();\n\n            switchToWindows();\n\n            driver.getCurrentUrl().contains(socialMediaUrl().get(i));\n\n\n            driver.close();\n\n            switchToWindows();\n\n        }\n\n        return this;\n\n    }\n\n\n    public MainPage checkRedirectStoreUrl() throws IOException {\n\n        waitForPageLoad();\n        js.executeScript(\"window.scrollBy(0,2000)\");\n\n        clickObjectBy(new RegisterPage_Constants(driver).BUTTON_CLOSE_COOKİE_BAR);\n\n        WebElement[] market = {getElementBy(APPLE_MARKET),\n                               getElementBy(HUAWEI_MARKET),\n                               getElementBy(GALAXY_STORE)};\n        List<WebElement> markets = Arrays.asList(market);\n\n        base.getSheet(\"NavigationUrl\");\n        List<String> marketsUrl = util.getRowDataAll(56, 59);\n\n        for (int i = 0; i < markets.size(); i++) {\n\n\n            markets.get(i).click();\n            switchToWindows();\n\n            Assert.assertEquals(driver.getCurrentUrl(), marketsUrl.get(i));\n\n            driver.close();\n            switchToWindows();\n\n        }\n\n        return this;\n    }\n\n    private List<String> socialMediaUrl() throws IOException {\n\n        base.getSheet(\"NavigationUrl\");\n        List<String> socialMedia = util.getRowDataAll(48, 52);\n\n        return socialMedia;\n    }\n\n    private List<WebElement> socialMediaElements() {\n\n        WebElement[] socialMedia = {getElementBy(FACEBOOK),\n                                    getElementBy(TWITTER),\n                                    getElementBy(INSTAGRAM),\n                                    getElementBy(YOUTUBE)};\n        List<WebElement> social = Arrays.asList(socialMedia);\n\n        return social;\n    }\n\n    public boolean isExistBanner() {\n\n        return isExist(MIN_WAIT_4_ELEMENT, BANNER);\n    }\n\n    private List<WebElement> banners() {\n\n        return driver.findElements(BANNER);\n    }\n\n    private List<WebElement> dynamicBanners() {\n\n        return driver.findElements(ODD_ON_BANNER);\n    }\n\n    public MainPage bannerSlider() {\n\n        int bannerCount = 1;\n\n        if (banners().size() > bannerCount) {\n            for (int i = 0; i < banners().size(); i++) {\n\n                getElementBy(BANNER_NEXT).isDisplayed();\n                waitForElement(driver, MIN_WAIT_4_ELEMENT, BANNER_NORMAL);\n\n            }\n        }\n        return this;\n    }\n\n    public MainPage isExistOddOnBanner() {\n\n        int count = 0;\n\n        for (int bannerIndex = count; bannerIndex < banners().size(); bannerIndex++) {\n\n            if (banners().get(bannerIndex).findElements(ODD_ON_BANNER).size() != 0) {\n\n                banners().get(bannerIndex).findElement(TOTAL_ODDS).isDisplayed();\n\n                for (int oddIndex = 0; oddIndex < dynamicBanners().size(); oddIndex++) {\n\n                    dynamicBanners().get(oddIndex).isDisplayed();\n                }\n            }\n        }\n        return this;\n    }\n\n    public MainPage isExistBulletAndArrow() {\n\n        int arrowCount = 2;\n        int bannerCount = 0;\n\n        if (driver.findElements(BANNER).size() != bannerCount) {\n\n\n            assertTrue(driver.findElements(ARROWS).size() == arrowCount);\n            isExist(MIN_WAIT_4_ELEMENT, SLIDER_BULLET);\n\n        }\n\n        return this;\n    }\n\n\n    public MainPage addOddToBetslip() {\n\n        int xOffset = 1268;\n        int yOffset = 410;\n\n\n        for (WebElement dynamicBanner : dynamicBanners()) {\n\n            List<WebElement> activeOdds = dynamicBanner.findElements(ODD_OUTCOME_BANNER);\n\n            List<WebElement> activeOdd =activeOdds.stream()\n                    .filter(odd -> !odd.getAttribute(\"class\").contains(\"eventOdd--locked\"))\n                    .collect(Collectors.toList());\n            System.out.println(activeOdd.size() +\"000\");\n\n            if (activeOdd.size() > 0) {\n\n                action.moveByOffset(xOffset, yOffset).perform();\n                activeOdds.get(0).click();\n\n                String oddMarketName = getElementBy(SELECTED_ODD).getText();\n                String betslipMarketName = getElementBy(EVENT_CONTENT_INFO).getText().substring(0, 7).trim();\n\n                boolean isEquals = oddMarketName.substring(0, 7).trim().equals(betslipMarketName) &&\n                        oddMarketName.substring(8, 13).trim().equals(getElementBy(BETSLIP_OUTCOME).getText().trim());\n\n                assertTrue(isEquals);\n\n            }\n        }\n\n        //String oddd = getElementBy(SELECTED_ODD).getText().substring(0, 7).trim();\n        //String of = getElementBy(EVENT_CONTENT_INFO).getText().substring(0, 7).trim();\n\n\n        return this;\n    }\n\n    public MainPage scrollToWidget(int index) throws InterruptedException {\n\n        sleep(1);\n        scrollToElements(By.className(\"widget-content\"), index);\n\n        return this;\n    }\n\n    public MainPage isExistWidget(int index, String widgetText) {\n\n        Assert.assertEquals(getElemenstBy(WIDGET_HEADER, index).getText(), widgetText);\n\n        return this;\n    }\n\n    public List<WebElement> branchListInWidget(By widgetName) {\n\n        return driver.findElements(widgetName).get(0).findElements(WIDGET_BRANCH);\n\n    }\n\n    public MainPage isExistBranchInWidget(By widgetName) {\n\n        assertTrue(branchListInWidget(widgetName).size() != 0);\n\n        return this;\n\n    }\n\n\n    public MainPage checkDefaultBranch(By widgetName) {\n\n        waitForElement(driver,MAX_WAIT_4_ELEMENT,widgetName);\n\n        String [] branches = {\"FUTBOL\",\n                              \"BASKETBOL\",\n                              \"TENİS\",\n                              \"MASA TENİSİ\",\n                              \"VOLEYBOL\",\n                              \"BUZ HOKEYİ\",\n                              \"HENTBOL\",\n                              \"SNOOKER\",\n                              \"MOTOR SPORLARI\",\n                              \"UZUN VADELİ\"};\n\n        String activeTab = getElementBy(WIDGET_ACTIVE_TAB).getText();\n\n        if (getElementBy(TAB_VIEW_LABELS).getText().contains(branches[0])){\n\n            assertTrue(activeTab.equals(branches[0]));\n        }\n        else if (!getElementBy(TAB_VIEW_LABELS).getText().contains(branches[0])){\n\n            assertTrue(activeTab.equals(branches[1]));\n        }\n        else if (!getElementBy(TAB_VIEW_LABELS).getText().contains(branches[1])){\n\n            assertTrue(activeTab.equals(branches[2]));\n        }\n        else if (!getElementBy(TAB_VIEW_LABELS).getText().contains(branches[2])){\n\n            assertTrue(activeTab.equals(branches[3]));\n        }\n\n        return this;\n    }\n\n    public List<By> eventRowLiveItems() {\n\n        List<By> items = new ArrayList<>();\n        items.add(LEAGUE_FLAG);\n        items.add(LEAGUE_CODE);\n        items.add(EVENT_TIME);\n        items.add(MBC);\n        items.add(TEAMS);\n        items.add(LIVE_SCORE);\n        items.add(LIVE_ICON);\n        items.add(LIVE_ODD);\n        items.add(EVENT_TOTAL_ODD);\n\n        return items;\n    }\n\n    public List<By> eventRowItems() {\n\n        List<By> items = new ArrayList<>();\n        items.add(LEAGUE_FLAG);\n        items.add(LEAGUE_CODE);\n        items.add(EVENT_TIME);\n        items.add(MBC);\n        items.add(TEAMS);\n        items.add(LIVE_ODD);\n        items.add(EVENT_TOTAL_ODD);\n        return items;\n\n    }\n\n    public MainPage checkEventItemsInBranch(By widgetName, By events, List<By> items, int i, String url)\n            throws InterruptedException {\n\n\n        int branchCount = 1;\n        int count = 0;\n\n        if (branchListInWidget(widgetName).size() > branchCount) {\n\n            for (int index = count; index < branchListInWidget(widgetName).size() - 1; ) {\n\n                switch (branchListInWidget(widgetName).get(index).getText().toUpperCase(Locale.ROOT)) {\n\n                    case \"FUTBOL\":\n                    case \"HENTBOL\":\n\n                        checkItemsOnEventRow(widgetName, events, items);\n\n                        checkStatusName(widgetName);\n\n                        break;\n                    case \"BASKETBOL\":\n\n                        checkItemsOnEventRow(widgetName, events, items);\n\n                        checkStatusName(widgetName);\n\n                        break;\n                    case \"TENIS\":\n                    case \"VOLEYBOL\":\n                    case \"MASA TENISI\":\n\n                        checkItemsOnEventRow(widgetName, events, items);\n\n                        checkStatusName(widgetName);\n\n                        break;\n\n                }\n\n                if (index < branchListInWidget(widgetName).size() - 1) {\n\n                    index++;\n                    waitForElement(branchListInWidget(widgetName).get(index), MIN_WAIT_4_ELEMENT);\n                    branchListInWidget(widgetName).get(index).click();\n                }\n            }\n            checkRedirectToScreen(i, url);\n        } else {\n\n            checkItemsOnEventRow(widgetName, events, items);\n            checkStatusName(widgetName);\n\n\n            checkRedirectToScreen(i, url);\n        }\n\n\n        return this;\n    }\n\n    private void clickButtonShowAll(int index) throws InterruptedException {\n        scrollToElements(WIDGET_SHOW_ALL, index);\n        clickObjectsBy(WIDGET_SHOW_ALL, index);\n    }\n\n\n    private void checkRedirectToScreen(int index, String url) throws InterruptedException {\n\n        clickButtonShowAll(index);\n        assertTrue(driver.getCurrentUrl().contains(url));\n\n    }\n\n    public MainPage getDashboard() throws IOException {\n\n        driver.get(prop.getObject(\"dashboard\"));\n\n        return this;\n    }\n\n    public EventDetailPage clickTotalOdd(By eventRows, By widgetName) throws InterruptedException {\n\n        List<WebElement> eventRow = driver.findElements(eventRows);\n\n        int count = 0;\n        for (int i = count; i < eventRow.size(); i++) {\n\n            if (!eventRow.get(count)\n                    .findElements(EVENT_TOTAL_ODD).get(0).getAttribute(\"class\").contains(\"disabled\")) {\n\n                String eventName = eventRow.get(count).findElement(TEAMS).getText();\n\n                scrollToWidget(1);\n                eventRow.get(count).findElement(EVENT_TOTAL_ODD).click();\n\n                waitForElement(driver, DEFAULT_WAIT_4_ELEMENT, EVENT_DETAIL_TEAMS);\n\n                Assert.assertEquals(eventName, getElementBy(EVENT_DETAIL_TEAMS).getText());\n            }\n\n            count++;\n            break;\n        }\n        if (getElementBy(widgetName).isDisplayed()) {\n            int index = 0;\n\n            String eventName = eventRow.get(index).findElement(TEAMS).getText();\n\n            eventRow.get(index).findElements(TEAMS).get(index).click();\n\n            waitForElement(driver, DEFAULT_WAIT_4_ELEMENT, EVENT_DETAIL_TEAMS);\n\n            Assert.assertEquals(eventName, getElementBy(EVENT_DETAIL_TEAMS).getText());\n        }\n\n        return new EventDetailPage(driver);\n    }\n\n\n    private void checkItemsOnEventRow(By widgetName, By events, List<By> items) {\n\n        List<WebElement> eventRowListt = driver.findElements(widgetName).get(0).findElements(events);\n\n        for (WebElement eventRow : eventRowListt) {\n\n            for (int i = 0; i < items.size(); i++) {\n\n                //     eventRow.findElement(items.get(i)).isDisplayed();\n                waitForElement(eventRow.findElement(items.get(i)), 3);\n            }\n        }\n    }\n\n    public MainPage getFirstBranch(By widgetName) {\n\n        branchListInWidget(widgetName).get(0).click();\n\n        return this;\n    }\n\n\n    private void checkStatusName(By widgetName) {\n\n        List<WebElement> widget = findElements(WIDGET_HEADER);\n        WebElement activeTab = findElements(widgetName).get(0).findElement(WIDGET_ACTIVE_TAB);\n        List<WebElement> statusName = findElements(EVENT_TIME);\n\n\n        if (getElementBy(widgetName).getText().contains(\"CANLI OYNANANLAR\")) {\n\n            switch (activeTab.getText()) {\n\n                case \"FUTBOL\":\n                case \"HENTBOL\":\n\n                    for (String status : statusNameFutbol()) {\n\n                        if (getElementBy(widgetName).findElements(EVENT_TIME).get(0).getText().contains(status)) {\n\n                            contains = true;\n                            break;\n                        }\n                    }\n\n                    break;\n                case \"BASKETBOL\":\n\n                    for (String status : statusNameBasketbol()) {\n\n                        if (getElementBy(widgetName).findElements(EVENT_TIME).get(0).getText().contains(status)) {\n\n                            contains = true;\n                            break;\n                        }\n                    }\n                    break;\n\n                case \"TENIS\":\n                case \"VOLEYBOL\":\n                case \"MASA TENISI\":\n\n                    for (String status : statusNameTenis()) {\n\n                        if (getElementBy(widgetName).findElements(EVENT_TIME).get(0).getText().contains(status)) {\n\n                            contains = true;\n                            break;\n                        }\n                    }\n                    break;\n\n            }\n        } else if (getElementBy(widgetName).getText().contains(\"YAKIN ZAMANDA BAŞLAYACAKLAR\")) {\n\n            checkStatus(NEAR_FUTURE_WİDGET, statusNameSoonTime());\n\n        } else if (getElementBy(widgetName).getText().contains(\"POPÜLER MAÇLAR\")) {\n\n            checkStatus(POPULAR_WIDGET, statusNamePopular());\n\n        }\n    }\n\n    private void checkStatus(By widgetName, String[] statusList) {\n\n        int count = 0;\n        for (int i = count; i < getElementBy(widgetName).findElements(EVENT_ROW).size(); i++) {\n\n            for (String status : statusList) {\n\n                if (getElementBy(widgetName).findElements(EVENT_TIME).get(i).getText().contains(status)) {\n\n                    contains = true;\n\n                }\n            }\n        }\n    }\n\n\n    private String[] statusNameFutbol() {\n\n        String status[] = {\"Y\", \"'\", \":\", \"DA\", \"UZ\"};\n        return status;\n    }\n\n    private String[] statusNameBasketbol() {\n\n        String status[] = {\"P\", \"UZ\", \":\", \"DA\"};\n        return status;\n    }\n\n    private String[] statusNameTenis() {\n\n        String status[] = {\"S\", \"UZ\", \":\", \"DA\"};\n        return status;\n    }\n\n    private String[] statusNameSoonTime() {\n\n        String status[] = {\"DK\", \"SA\", \"GÜN\"};\n        return status;\n    }\n\n    private String[] statusNamePopular() {\n\n        String status[] = {\"Bgn\", \"Yrn\", \":\"};\n        return status;\n    }\n\n\n    public MainPage checkTheyWillStartSoonWidget() throws InterruptedException {\n\n\n        scrollToElement(WIDGET_TEXT);\n        isExistWidget(1, \"YAKIN ZAMANDA BAŞLAYACAKLAR\");\n     //   checkDefaultBranch(NEAR_FUTURE_WİDGET, \"YAKIN ZAMANDA BAŞLAYACAKLAR\");\n\n        return this;\n    }\n\n    public CampaignsPage getCampaignsPage() throws IOException {\n\n        try {\n\n            waitForElementDisappear(getElementBy(MODAL_CONTAINER));\n        }\n        catch (Exception exp){\n\n           System.out.println(prop.getObject(\"contractMessage\"));\n        }\n        finally {\n\n            clickObjectBy(CAMPAIGNS_ICON);\n        }\n\n\n        return new CampaignsPage(driver);\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/tuttur/page/MainPage.java b/src/test/java/com/tuttur/page/MainPage.java
--- a/src/test/java/com/tuttur/page/MainPage.java	
+++ b/src/test/java/com/tuttur/page/MainPage.java	
@@ -14,6 +14,8 @@
 import com.tuttur.constants.MainPage_Constants;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.interactions.Actions;
+
+import java.io.File;
 import java.io.IOException;
 import java.util.*;
 import java.util.stream.Collectors;
@@ -221,6 +223,45 @@
         return this;
     }
 
+    public void downloadApk(){
+        List<WebElement> apk = driver.findElements(By.className("footerContentDownloads-playStore"));
+
+        WebElement store = apk.get(apk.size()-1);
+        store.click();
+
+        sleep(5);
+
+    }
+    public void checkDownloadedApk(){
+
+        String local = System.getProperty("user.home");
+        File folder = new File(local + "/Downloads/");
+
+        File[] listOfFolder = folder.listFiles();
+
+        boolean found = false;
+
+        File file = null;
+
+        for (File listOfFile: listOfFolder) {
+
+            if (listOfFile.isFile()){
+
+                String fileName = listOfFile.getName();
+                System.out.println("File :" + fileName);
+                if (fileName.matches("tutturcom-v3-00.apk")){
+
+                    file = new File(fileName);
+                    found = true;
+
+                    break;
+                }
+            }
+        }
+        assertTrue("Apk bulunamadı", found);
+        file.deleteOnExit();
+    }
+
     private List<String> socialMediaUrl() throws IOException {
 
         base.getSheet("NavigationUrl");
